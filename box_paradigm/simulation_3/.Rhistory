print(interaction_vec[2,1], sep = "\t", quote = FALSE, row.names = FALSE)
cat(paste(";", sep="\t"))
cat("\n")
# Concordant agent that formerly engaged in no action with an object I
cat(paste("name: ConcordantAgentPastNoActionNoInteraction", k, "\n", sep=""))
cat(paste("I:", "\n", sep="\t"))
# Person 1
cat(paste("(Slot_A)", sep="\t"))
print(pretrain_concordant_1[i,], sep = "\t", quote = FALSE, row.names = FALSE)
cat(paste("(Eyes_1)", sep="\t"))
print(eyes_vec[1,1], sep = "\t", quote = FALSE, row.names = FALSE)
cat(paste("(Memory_IN)", sep="\t"))
print(memory_trace_vec[3,1], sep = "\t", quote = FALSE, row.names = FALSE)
cat(paste("T:", "\n", sep="\t"))
# Person 1
cat(paste("(Slot_A_OUT)", sep="\t"))
print(pretrain_concordant_1[i,], sep = "\t", quote = FALSE, row.names = FALSE)
cat(paste("(Eyes_1_OUT)", sep="\t"))
print(eyes_vec[1,1], sep = "\t", quote = FALSE, row.names = FALSE)
cat(paste("(Memory_OUT)", sep="\t"))
print(memory_trace_vec[3,1], sep = "\t", quote = FALSE, row.names = FALSE)
# Interaction Output
cat(paste("(Interaction_OUT)", sep="\t"))
print(interaction_vec[2,1], sep = "\t", quote = FALSE, row.names = FALSE)
cat(paste(";", sep="\t"))
cat("\n")
# Concordant agent that formerly engaged in no action with an object II
cat(paste("name: ConcordantAgentPastNoActionInteraction", k, "\n", sep=""))
cat(paste("I:", "\n", sep="\t"))
# Person 1
cat(paste("(Slot_A)", sep="\t"))
print(pretrain_concordant_1[i,], sep = "\t", quote = FALSE, row.names = FALSE)
cat(paste("(Eyes_1)", sep="\t"))
print(eyes_vec[1,1], sep = "\t", quote = FALSE, row.names = FALSE)
cat(paste("(Memory_IN)", sep="\t"))
print(memory_trace_vec[3,1], sep = "\t", quote = FALSE, row.names = FALSE)
cat(paste("T:", "\n", sep="\t"))
# Person 1
cat(paste("(Slot_A_OUT)", sep="\t"))
print(pretrain_concordant_1[i,], sep = "\t", quote = FALSE, row.names = FALSE)
cat(paste("(Eyes_1_OUT)", sep="\t"))
print(eyes_vec[1,1], sep = "\t", quote = FALSE, row.names = FALSE)
cat(paste("(Memory_OUT)", sep="\t"))
print(memory_trace_vec[3,1], sep = "\t", quote = FALSE, row.names = FALSE)
# Interaction Output
cat(paste("(Interaction_OUT)", sep="\t"))
print(interaction_vec[1,1], sep = "\t", quote = FALSE, row.names = FALSE)
cat(paste(";", sep="\t"))
cat("\n")
# DISCORDANT AGENTS AND DISCORDANT ACTION
cat(paste("name: DiscordantAgentPastDiscordantNoInteraction", k, "\n", sep=""))
cat(paste("I:", "\n", sep="\t"))
# Person 1
cat(paste("(Slot_A)", sep="\t"))
print(pretrain_discordant_1[i,], sep = "\t", quote = FALSE, row.names = FALSE)
cat(paste("(Eyes_1)", sep="\t"))
print(eyes_vec[1,1], sep = "\t", quote = FALSE, row.names = FALSE)
cat(paste("(Memory_IN)", sep="\t"))
print(memory_trace_vec[2,1], sep = "\t", quote = FALSE, row.names = FALSE)
cat(paste("T:", "\n", sep="\t"))
# Person 1
cat(paste("(Slot_A_OUT)", sep="\t"))
print(pretrain_discordant_1[i,], sep = "\t", quote = FALSE, row.names = FALSE)
cat(paste("(Eyes_1_OUT)", sep="\t"))
print(eyes_vec[1,1], sep = "\t", quote = FALSE, row.names = FALSE)
cat(paste("(Memory_OUT)", sep="\t"))
print(memory_trace_vec[2,1], sep = "\t", quote = FALSE, row.names = FALSE)
# Interaction Output
cat(paste("(Interaction_OUT)", sep="\t"))
print(interaction_vec[1,1], sep = "\t", quote = FALSE, row.names = FALSE)
cat(paste(";", sep="\t"))
cat("\n")
# Discordant agent that formerly engaged in no action with an object I
cat(paste("name: DiscordantAgentPastNoActionNoInteraction", k, "\n", sep=""))
cat(paste("I:", "\n", sep="\t"))
# Person 1
cat(paste("(Slot_A)", sep="\t"))
print(pretrain_discordant_1[i,], sep = "\t", quote = FALSE, row.names = FALSE)
cat(paste("(Eyes_1)", sep="\t"))
print(eyes_vec[1,1], sep = "\t", quote = FALSE, row.names = FALSE)
cat(paste("(Memory_IN)", sep="\t"))
print(memory_trace_vec[3,1], sep = "\t", quote = FALSE, row.names = FALSE)
cat(paste("T:", "\n", sep="\t"))
# Person 1
cat(paste("(Slot_A_OUT)", sep="\t"))
print(pretrain_discordant_1[i,], sep = "\t", quote = FALSE, row.names = FALSE)
cat(paste("(Eyes_1_OUT)", sep="\t"))
print(eyes_vec[1,1], sep = "\t", quote = FALSE, row.names = FALSE)
cat(paste("(Memory_OUT)", sep="\t"))
print(memory_trace_vec[3,1], sep = "\t", quote = FALSE, row.names = FALSE)
# Interaction Output
cat(paste("(Interaction_OUT)", sep="\t"))
print(interaction_vec[2,1], sep = "\t", quote = FALSE, row.names = FALSE)
cat(paste(";", sep="\t"))
cat("\n")
# Discordant agent that formerly engaged in no action with an object II
cat(paste("name: DiscordantAgentPastNoActionInteraction", k, "\n", sep=""))
cat(paste("I:", "\n", sep="\t"))
# Person 1
cat(paste("(Slot_A)", sep="\t"))
print(pretrain_discordant_1[i,], sep = "\t", quote = FALSE, row.names = FALSE)
cat(paste("(Eyes_1)", sep="\t"))
print(eyes_vec[1,1], sep = "\t", quote = FALSE, row.names = FALSE)
cat(paste("(Memory_IN)", sep="\t"))
print(memory_trace_vec[3,1], sep = "\t", quote = FALSE, row.names = FALSE)
cat(paste("T:", "\n", sep="\t"))
# Person 1
cat(paste("(Slot_A_OUT)", sep="\t"))
print(pretrain_discordant_1[i,], sep = "\t", quote = FALSE, row.names = FALSE)
cat(paste("(Eyes_1_OUT)", sep="\t"))
print(eyes_vec[1,1], sep = "\t", quote = FALSE, row.names = FALSE)
cat(paste("(Memory_OUT)", sep="\t"))
print(memory_trace_vec[3,1], sep = "\t", quote = FALSE, row.names = FALSE)
# Interaction Output
cat(paste("(Interaction_OUT)", sep="\t"))
print(interaction_vec[1,1], sep = "\t", quote = FALSE, row.names = FALSE)
cat(paste(";", sep="\t"))
cat("\n")
k = k+1
}
sink()
###################
# habituation set #
###################
sink('habituation.ex')
cat(paste("defT:-", "\n", sep=""))
k = 1
for(i in 1:nrow(hab_test_object_1)){
for(j in 1:nrow(hab_test_object_2)){
# HELPING EVENTS
cat(paste("name: HelpingEvents", k, "\n", sep=""))
cat(paste("I:", "\n", sep="\t"))
# Person 1
cat(paste("(Slot_A)", sep="\t"))
print(hab_test_object_1[i,], sep = "\t", quote = FALSE, row.names = FALSE)
cat(paste("(Eyes_1)", sep="\t"))
print(eyes_vec[1,1], sep = "\t", quote = FALSE, row.names = FALSE)
# Person 2
cat(paste("(Slot_B)", sep="\t"))
print(hab_test_object_2[j,], sep = "\t", quote = FALSE, row.names = FALSE)
cat(paste("(Eyes_2)", sep="\t"))
print(eyes_vec[1,1], sep = "\t", quote = FALSE, row.names = FALSE)
# Motion Input
cat(paste("(Motion_IN)", sep="\t"))
print(action_vec[1,1], sep = "\t", quote = FALSE, row.names = FALSE)
# Propulsion Input
cat(paste("(Propel_IN)", sep="\t"))
print(propel_vec[1,1], sep = "\t", quote = FALSE, row.names = FALSE)
# Box
cat(paste("(Box_IN)", sep="\t"))
print(box[1,1], sep = "\t", quote = FALSE, row.names = FALSE)
cat(paste("T:", "\n", sep="\t"))
# Person 1
cat(paste("(Slot_A_OUT)", sep="\t"))
print(hab_test_object_1[i,], sep = "\t", quote = FALSE, row.names = FALSE)
cat(paste("(Eyes_1_OUT)", sep="\t"))
print(eyes_vec[1,1], sep = "\t", quote = FALSE, row.names = FALSE)
# Person 2
cat(paste("(Slot_B_OUT)", sep="\t"))
print(hab_test_object_2[j,], sep = "\t", quote = FALSE, row.names = FALSE)
cat(paste("(Eyes_2_OUT)", sep="\t"))
print(eyes_vec[1,1], sep = "\t", quote = FALSE, row.names = FALSE)
# Motion Input
cat(paste("(Motion_OUT)", sep="\t"))
print(action_vec[1,1], sep = "\t", quote = FALSE, row.names = FALSE)
# Propulsion Input
cat(paste("(Propel_OUT)", sep="\t"))
print(propel_vec[1,1], sep = "\t", quote = FALSE, row.names = FALSE)
# Box
cat(paste("(Box_OUT)", sep="\t"))
print(box[1,1], sep = "\t", quote = FALSE, row.names = FALSE)
cat(paste(";", sep="\t"))
cat("\n")
# HINDERING EVENTS
cat(paste("name: HinderingEvents", k, "\n", sep=""))
cat(paste("I:", "\n", sep="\t"))
# Person 1
cat(paste("(Slot_A)", sep="\t"))
print(hab_test_object_3[i,], sep = "\t", quote = FALSE, row.names = FALSE)
cat(paste("(Eyes_1)", sep="\t"))
print(eyes_vec[1,1], sep = "\t", quote = FALSE, row.names = FALSE)
# Person 2
cat(paste("(Slot_B)", sep="\t"))
print(hab_test_object_2[j,], sep = "\t", quote = FALSE, row.names = FALSE)
cat(paste("(Eyes_2)", sep="\t"))
print(eyes_vec[1,1], sep = "\t", quote = FALSE, row.names = FALSE)
# Motion Input
cat(paste("(Motion_IN)", sep="\t"))
print(action_vec[2,1], sep = "\t", quote = FALSE, row.names = FALSE)
# Propulsion Input
cat(paste("(Propel_IN)", sep="\t"))
print(propel_vec[1,1], sep = "\t", quote = FALSE, row.names = FALSE)
# Box
cat(paste("(Box_IN)", sep="\t"))
print(box[1,1], sep = "\t", quote = FALSE, row.names = FALSE)
cat(paste("T:", "\n", sep="\t"))
# Person 1
cat(paste("(Slot_A_OUT)", sep="\t"))
print(hab_test_object_3[i,], sep = "\t", quote = FALSE, row.names = FALSE)
cat(paste("(Eyes_1_OUT)", sep="\t"))
print(eyes_vec[1,1], sep = "\t", quote = FALSE, row.names = FALSE)
# Person 2
cat(paste("(Slot_B_OUT)", sep="\t"))
print(hab_test_object_2[j,], sep = "\t", quote = FALSE, row.names = FALSE)
cat(paste("(Eyes_2_OUT)", sep="\t"))
print(eyes_vec[1,1], sep = "\t", quote = FALSE, row.names = FALSE)
# Motion Input
cat(paste("(Motion_OUT)", sep="\t"))
print(action_vec[2,1], sep = "\t", quote = FALSE, row.names = FALSE)
# Propulsion Input
cat(paste("(Propel_OUT)", sep="\t"))
print(propel_vec[1,1], sep = "\t", quote = FALSE, row.names = FALSE)
# Box
cat(paste("(Box_OUT)", sep="\t"))
print(box[1,1], sep = "\t", quote = FALSE, row.names = FALSE)
cat(paste(";", sep="\t"))
cat("\n")
k = k+1
}
}
sink()
sink('habituation_no_eyes_no_sp.ex')
cat(paste("defT:-", "\n", sep=""))
k = 1
for(i in 1:nrow(hab_test_object_1)){
for(j in 1:nrow(hab_test_object_1)){
# HELPING EVENTS
cat(paste("name: HelpingEvents", k, "\n", sep=""))
cat(paste("I:", "\n", sep="\t"))
# Person 1
cat(paste("(Slot_A)", sep="\t"))
print(hab_test_object_1[i,], sep = "\t", quote = FALSE, row.names = FALSE)
cat(paste("(Eyes_1)", sep="\t"))
print(eyes_vec[1,1], sep = "\t", quote = FALSE, row.names = FALSE)
# Person 2
cat(paste("(Slot_B)", sep="\t"))
print(hab_test_object_2[j,], sep = "\t", quote = FALSE, row.names = FALSE)
cat(paste("(Eyes_2)", sep="\t"))
print(eyes_vec[2,1], sep = "\t", quote = FALSE, row.names = FALSE)
# Motion Input
cat(paste("(Motion_IN)", sep="\t"))
print(action_vec[1,1], sep = "\t", quote = FALSE, row.names = FALSE)
# Propulsion Input
cat(paste("(Propel_IN)", sep="\t"))
print(propel_vec[2,1], sep = "\t", quote = FALSE, row.names = FALSE)
# Box
cat(paste("(Box_IN)", sep="\t"))
print(box[1,1], sep = "\t", quote = FALSE, row.names = FALSE)
cat(paste("T:", "\n", sep="\t"))
# Person 1
cat(paste("(Slot_A_OUT)", sep="\t"))
print(hab_test_object_1[i,], sep = "\t", quote = FALSE, row.names = FALSE)
cat(paste("(Eyes_1_OUT)", sep="\t"))
print(eyes_vec[1,1], sep = "\t", quote = FALSE, row.names = FALSE)
# Person 2
cat(paste("(Slot_B_OUT)", sep="\t"))
print(hab_test_object_2[j,], sep = "\t", quote = FALSE, row.names = FALSE)
cat(paste("(Eyes_2_OUT)", sep="\t"))
print(eyes_vec[2,1], sep = "\t", quote = FALSE, row.names = FALSE)
# Motion Input
cat(paste("(Motion_OUT)", sep="\t"))
print(action_vec[1,1], sep = "\t", quote = FALSE, row.names = FALSE)
# Propulsion Input
cat(paste("(Propel_OUT)", sep="\t"))
print(propel_vec[2,1], sep = "\t", quote = FALSE, row.names = FALSE)
# Box
cat(paste("(Box_OUT)", sep="\t"))
print(box[1,1], sep = "\t", quote = FALSE, row.names = FALSE)
cat(paste(";", sep="\t"))
cat("\n")
# HINDERING EVENTS
cat(paste("name: HinderingEvents", k, "\n", sep=""))
cat(paste("I:", "\n", sep="\t"))
# Person 1
cat(paste("(Slot_A)", sep="\t"))
print(hab_test_object_3[i,], sep = "\t", quote = FALSE, row.names = FALSE)
cat(paste("(Eyes_1)", sep="\t"))
print(eyes_vec[1,1], sep = "\t", quote = FALSE, row.names = FALSE)
# Person 2
cat(paste("(Slot_B)", sep="\t"))
print(hab_test_object_2[j,], sep = "\t", quote = FALSE, row.names = FALSE)
cat(paste("(Eyes_2)", sep="\t"))
print(eyes_vec[2,1], sep = "\t", quote = FALSE, row.names = FALSE)
# Motion Input
cat(paste("(Motion_IN)", sep="\t"))
print(action_vec[2,1], sep = "\t", quote = FALSE, row.names = FALSE)
# Propulsion Input
cat(paste("(Propel_IN)", sep="\t"))
print(propel_vec[2,1], sep = "\t", quote = FALSE, row.names = FALSE)
# Box
cat(paste("(Box_IN)", sep="\t"))
print(box[1,1], sep = "\t", quote = FALSE, row.names = FALSE)
cat(paste("T:", "\n", sep="\t"))
# Person 1
cat(paste("(Slot_A_OUT)", sep="\t"))
print(hab_test_object_3[i,], sep = "\t", quote = FALSE, row.names = FALSE)
cat(paste("(Eyes_1_OUT)", sep="\t"))
print(eyes_vec[1,1], sep = "\t", quote = FALSE, row.names = FALSE)
# Person 2
cat(paste("(Slot_B_OUT)", sep="\t"))
print(hab_test_object_2[j,], sep = "\t", quote = FALSE, row.names = FALSE)
cat(paste("(Eyes_2_OUT)", sep="\t"))
print(eyes_vec[2,1], sep = "\t", quote = FALSE, row.names = FALSE)
# Motion Input
cat(paste("(Motion_OUT)", sep="\t"))
print(action_vec[2,1], sep = "\t", quote = FALSE, row.names = FALSE)
# Propulsion Input
cat(paste("(Propel_OUT)", sep="\t"))
print(propel_vec[2,1], sep = "\t", quote = FALSE, row.names = FALSE)
# Box
cat(paste("(Box_OUT)", sep="\t"))
print(box[1,1], sep = "\t", quote = FALSE, row.names = FALSE)
cat(paste(";", sep="\t"))
cat("\n")
k = k+1
}
}
sink()
############
# test set #
############
sink('test.ex')
cat(paste("defT:-", "\n", sep=""))
k = 1
for(i in 1:nrow(hab_test_object_1)){
# HELPER ENTITIES
cat(paste("name: Helper", k, "\n", sep=""))
cat(paste("I:", "\n", sep="\t"))
# Person 1
cat(paste("(Slot_A)", sep="\t"))
print(hab_test_object_1[i,], sep = "\t", quote = FALSE, row.names = FALSE)
# Eyes
cat(paste("(Eyes_1)", sep="\t"))
print(eyes_vec[1,1], sep = "\t", quote = FALSE, row.names = FALSE)
# Memory Input
cat(paste("(Memory_IN)", sep="\t"))
print(memory_trace_vec[1,1], sep = "\t", quote = FALSE, row.names = FALSE)
cat(paste("T:", "\n", sep="\t"))
# Person 1
cat(paste("(Slot_A_OUT)", sep="\t"))
print(hab_test_object_1[i,], sep = "\t", quote = FALSE, row.names = FALSE)
# Eyes
cat(paste("(Eyes_1_OUT)", sep="\t"))
print(eyes_vec[1,1], sep = "\t", quote = FALSE, row.names = FALSE)
# Interaction Output
cat(paste("(Interaction_OUT)", sep="\t"))
print(interaction_vec[1,1], sep = "\t", quote = FALSE, row.names = FALSE)
# Memory Output
cat(paste("(Memory_OUT)", sep="\t"))
print(memory_trace_vec[1,1], sep = "\t", quote = FALSE, row.names = FALSE)
cat(paste(";", sep="\t"))
cat("\n")
# HINDERER ENTITIES
cat(paste("name: Hinderer", k, "\n", sep=""))
cat(paste("I:", "\n", sep="\t"))
# Person 1
cat(paste("(Slot_A)", sep="\t"))
print(hab_test_object_3[i,], sep = "\t", quote = FALSE, row.names = FALSE)
# Eyes
cat(paste("(Eyes_1)", sep="\t"))
print(eyes_vec[1,1], sep = "\t", quote = FALSE, row.names = FALSE)
# Memory Input
cat(paste("(Memory_IN)", sep="\t"))
print(memory_trace_vec[2,1], sep = "\t", quote = FALSE, row.names = FALSE)
cat(paste("T:", "\n", sep="\t"))
# Person 1
cat(paste("(Slot_A_OUT)", sep="\t"))
print(hab_test_object_3[i,], sep = "\t", quote = FALSE, row.names = FALSE)
# Eyes
cat(paste("(Eyes_1_OUT)", sep="\t"))
print(eyes_vec[1,1], sep = "\t", quote = FALSE, row.names = FALSE)
# Interaction Output
cat(paste("(Interaction_OUT)", sep="\t"))
print(interaction_vec[2,1], sep = "\t", quote = FALSE, row.names = FALSE)
# Memory Output
cat(paste("(Memory_OUT)", sep="\t"))
print(memory_trace_vec[2,1], sep = "\t", quote = FALSE, row.names = FALSE)
cat(paste(";", sep="\t"))
cat("\n")
k = k+1
}
sink()
sink('test_control.ex')
cat(paste("defT:-", "\n", sep=""))
k = 1
for(i in 1:nrow(hab_test_object_1)){
# HELPER ENTITIES
cat(paste("name: Helper", k, "\n", sep=""))
cat(paste("I:", "\n", sep="\t"))
# Person 1
cat(paste("(Slot_A)", sep="\t"))
print(hab_test_object_1[i,], sep = "\t", quote = FALSE, row.names = FALSE)
# Eyes
cat(paste("(Eyes_1)", sep="\t"))
print(eyes_vec[1,1], sep = "\t", quote = FALSE, row.names = FALSE)
# Memory Input
cat(paste("(Memory_IN)", sep="\t"))
print(memory_trace_vec[3,1], sep = "\t", quote = FALSE, row.names = FALSE)
cat(paste("T:", "\n", sep="\t"))
# Person 1
cat(paste("(Slot_A_OUT)", sep="\t"))
print(hab_test_object_1[i,], sep = "\t", quote = FALSE, row.names = FALSE)
# Eyes
cat(paste("(Eyes_1_OUT)", sep="\t"))
print(eyes_vec[1,1], sep = "\t", quote = FALSE, row.names = FALSE)
# Interaction Input
cat(paste("(Interaction_OUT)", sep="\t"))
print(interaction_vec[1,1], sep = "\t", quote = FALSE, row.names = FALSE)
# Memory Output
cat(paste("(Memory_OUT)", sep="\t"))
print(memory_trace_vec[3,1], sep = "\t", quote = FALSE, row.names = FALSE)
cat(paste(";", sep="\t"))
cat("\n")
# HINDERER ENTITIES
cat(paste("name: Hinderer", k, "\n", sep=""))
cat(paste("I:", "\n", sep="\t"))
# Person 1
cat(paste("(Slot_A)", sep="\t"))
print(hab_test_object_3[i,], sep = "\t", quote = FALSE, row.names = FALSE)
# Eyes
cat(paste("(Eyes_1)", sep="\t"))
print(eyes_vec[1,1], sep = "\t", quote = FALSE, row.names = FALSE)
# Memory Input
cat(paste("(Memory_IN)", sep="\t"))
print(memory_trace_vec[3,1], sep = "\t", quote = FALSE, row.names = FALSE)
cat(paste("T:", "\n", sep="\t"))
# Person 1
cat(paste("(Slot_A_OUT)", sep="\t"))
print(hab_test_object_3[i,], sep = "\t", quote = FALSE, row.names = FALSE)
# Eyes
cat(paste("(Eyes_1_OUT)", sep="\t"))
print(eyes_vec[1,1], sep = "\t", quote = FALSE, row.names = FALSE)
# Interaction Output
cat(paste("(Interaction_OUT)", sep="\t"))
print(interaction_vec[2,1], sep = "\t", quote = FALSE, row.names = FALSE)
# Memory Output
cat(paste("(Memory_OUT)", sep="\t"))
print(memory_trace_vec[3,1], sep = "\t", quote = FALSE, row.names = FALSE)
cat(paste(";", sep="\t"))
cat("\n")
k = k+1
}
sink()
library(lme4)
library(nlme)
library(boot)
library(car)
library(reshape2)
library(ggplot2)
library(ez)
library(plyr)
library(ggsignif)
library(lsr)
library(sjmisc)
library(sjstats)
library(BayesFactor)
library(foreign)
library(dplyr)
library(lattice)
options(scipen=9999)
# load data
D = read.csv(file.choose(), header = TRUE)
D_tall = reshape(D, varying = 3:6, v.names = "measure",
timevar = "unit_type", idvar = "ID",
new.row.names = 1:128, direction = "long")
# order data
D_tall = D_tall[order(D_tall$ID),]
# names D_tall
names(D_tall)
# rename the levels of the following factors: c(D_tall$event, D_tall$unit_type)
D_tall$event = revalue(x = as.factor(D_tall$event),
c("1" = "First Trial",
"2"="Second Trial"))
D_tall$unit_type = as.factor(rep(c(0,1), each = 2, times = 32))
D_tall$unit_type = revalue(x = as.factor(D_tall$unit_type),
c("0" = "Interaction Unit",
"1"="NonInteraction Unit"))
D_tall$char_type = as.factor(rep(c(0,1), each = 4, times = 16))
D_tall$char_type = revalue(x = as.factor(D_tall$char_type),
c("0" = "Helper",
"1"="Hinderer"))
# remove extraneous columns
D_tall$row.names = NULL
# reorder columns in 'D_tall' dataframe
D_tall = D_tall[,c(1,2,3,5,4)]
## DETERMINE WHETHER RANDOM EFFECT OF "SUBJ" IS NECESSARY ##
model_1 = lme(measure ~ 1, random=~1|ID,
data=D_tall)
model_2 = lm(measure~1, data = D_tall)
anova(model_1,model_2)
lm.fit = lm(measure~(unit_type + char_type)^2, data = D_tall)
anova(lm.fit)
condition_barplot = ggplot(D_tall, aes(char_type, measure, fill = unit_type)) # create the bar graph with test.trial.2 on the x-axis and measure on the y-axis
condition_barplot + stat_summary(fun.y = mean, geom = "bar", position = "dodge") + # add the bars, which represent the means and the place them side-by-side with 'dodge'
stat_summary(fun.data=mean_cl_boot, geom = "errorbar", position = position_dodge(width=0.90), width = 0.2) + # add errors bars
ylab("Interaction Expectation") + # change the label of the y-axis
theme_bw() + # remove the gray background
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) + # remove the major and minor grids
scale_y_continuous(expand = c(0, 0)) + # ensure that bars hit the x-axis
coord_cartesian(ylim=c(0, 115)) +
scale_fill_manual(values=c("black", "gray", "black", "gray")) +
theme_classic() + # this changes the size and potentially weight of the facet labels
labs(x = "Character Type") +
labs(fill = "Unit Type")
mean(D_tall$measure[D_tall$unit_type=="Interaction Unit" & D_tall$char_type=="Helper"])
sd(D_tall$measure[D_tall$unit_type=="Interaction Unit" & D_tall$char_type=="Helper"])
mean(D_tall$measure[D_tall$unit_type=="NonInteraction Unit" & D_tall$char_type=="Helper"])
sd(D_tall$measure[D_tall$unit_type=="NonInteraction Unit" & D_tall$char_type=="Helper"])
t.test(D_tall$measure[D_tall$unit_type=="Interaction Unit" & D_tall$char_type=="Helper"],
D_tall$measure[D_tall$unit_type=="NonInteraction Unit" & D_tall$char_type=="Helper"],
alternative = c("two.sided"), paired = TRUE)
