cat(paste("(Propel_OUT)", sep="\t"))
print(propel_vec[2,1], sep = "\t", quote = FALSE, row.names = FALSE)
# Box
cat(paste("(Box_OUT)", sep="\t"))
print(box[1,1], sep = "\t", quote = FALSE, row.names = FALSE)
cat(paste(";", sep="\t"))
cat("\n")
k = k+1
}
}
sink()
############
# test set #
############
sink('testExp1A.ex')
cat(paste("defT:-", "\n", sep=""))
k = 1
for(i in 1:nrow(hab_test_object_1)){
# HELPER ENTITIES
cat(paste("name: SuccessfulHelper", k, "\n", sep=""))
cat(paste("I:", "\n", sep="\t"))
# Person 1
cat(paste("(Slot_A)", sep="\t"))
print(hab_test_object_1[i,], sep = "\t", quote = FALSE, row.names = FALSE)
# Eyes
cat(paste("(Eyes_1)", sep="\t"))
print(eyes_vec[1,1], sep = "\t", quote = FALSE, row.names = FALSE)
# Memory Input
cat(paste("(Memory_IN)", sep="\t"))
print(memory_trace_vec[1,1], sep = "\t", quote = FALSE, row.names = FALSE)
cat(paste("T:", "\n", sep="\t"))
# Person 1
cat(paste("(Slot_A_OUT)", sep="\t"))
print(hab_test_object_1[i,], sep = "\t", quote = FALSE, row.names = FALSE)
# Eyes
cat(paste("(Eyes_1_OUT)", sep="\t"))
print(eyes_vec[1,1], sep = "\t", quote = FALSE, row.names = FALSE)
# Interaction Output
cat(paste("(Interaction_OUT)", sep="\t"))
print(interaction_vec[1,1], sep = "\t", quote = FALSE, row.names = FALSE)
# Memory Output
cat(paste("(Memory_OUT)", sep="\t"))
print(memory_trace_vec[1,1], sep = "\t", quote = FALSE, row.names = FALSE)
cat(paste(";", sep="\t"))
cat("\n")
# HINDERER ENTITIES
cat(paste("name: FailedHinderer", k, "\n", sep=""))
cat(paste("I:", "\n", sep="\t"))
# Person 1
cat(paste("(Slot_A)", sep="\t"))
print(hab_test_object_3[i,], sep = "\t", quote = FALSE, row.names = FALSE)
# Eyes
cat(paste("(Eyes_1)", sep="\t"))
print(eyes_vec[1,1], sep = "\t", quote = FALSE, row.names = FALSE)
# Memory Input
cat(paste("(Memory_IN)", sep="\t"))
print(memory_trace_vec[2,1], sep = "\t", quote = FALSE, row.names = FALSE)
cat(paste("T:", "\n", sep="\t"))
# Person 1
cat(paste("(Slot_A_OUT)", sep="\t"))
print(hab_test_object_3[i,], sep = "\t", quote = FALSE, row.names = FALSE)
# Eyes
cat(paste("(Eyes_1_OUT)", sep="\t"))
print(eyes_vec[1,1], sep = "\t", quote = FALSE, row.names = FALSE)
# Interaction Output
cat(paste("(Interaction_OUT)", sep="\t"))
print(interaction_vec[2,1], sep = "\t", quote = FALSE, row.names = FALSE)
# Memory Output
cat(paste("(Memory_OUT)", sep="\t"))
print(memory_trace_vec[2,1], sep = "\t", quote = FALSE, row.names = FALSE)
cat(paste(";", sep="\t"))
cat("\n")
k = k+1
}
sink()
sink('testExp1B.ex')
cat(paste("defT:-", "\n", sep=""))
k = 1
for(i in 1:nrow(hab_test_object_1)){
# HELPER ENTITIES
cat(paste("name: FailedHelper", k, "\n", sep=""))
cat(paste("I:", "\n", sep="\t"))
# Person 1
cat(paste("(Slot_A)", sep="\t"))
print(hab_test_object_1[i,], sep = "\t", quote = FALSE, row.names = FALSE)
# Eyes
cat(paste("(Eyes_1)", sep="\t"))
print(eyes_vec[1,1], sep = "\t", quote = FALSE, row.names = FALSE)
# Memory Input
cat(paste("(Memory_IN)", sep="\t"))
print(memory_trace_vec[1,1], sep = "\t", quote = FALSE, row.names = FALSE)
cat(paste("T:", "\n", sep="\t"))
# Person 1
cat(paste("(Slot_A_OUT)", sep="\t"))
print(hab_test_object_1[i,], sep = "\t", quote = FALSE, row.names = FALSE)
# Eyes
cat(paste("(Eyes_1_OUT)", sep="\t"))
print(eyes_vec[1,1], sep = "\t", quote = FALSE, row.names = FALSE)
# Interaction Output
cat(paste("(Interaction_OUT)", sep="\t"))
print(interaction_vec[1,1], sep = "\t", quote = FALSE, row.names = FALSE)
# Memory Output
cat(paste("(Memory_OUT)", sep="\t"))
print(memory_trace_vec[1,1], sep = "\t", quote = FALSE, row.names = FALSE)
cat(paste(";", sep="\t"))
cat("\n")
# HINDERER ENTITIES
cat(paste("name: SuccessfulHinderer", k, "\n", sep=""))
cat(paste("I:", "\n", sep="\t"))
# Person 1
cat(paste("(Slot_A)", sep="\t"))
print(hab_test_object_3[i,], sep = "\t", quote = FALSE, row.names = FALSE)
# Eyes
cat(paste("(Eyes_1)", sep="\t"))
print(eyes_vec[1,1], sep = "\t", quote = FALSE, row.names = FALSE)
# Memory Input
cat(paste("(Memory_IN)", sep="\t"))
print(memory_trace_vec[2,1], sep = "\t", quote = FALSE, row.names = FALSE)
cat(paste("T:", "\n", sep="\t"))
# Person 1
cat(paste("(Slot_A_OUT)", sep="\t"))
print(hab_test_object_3[i,], sep = "\t", quote = FALSE, row.names = FALSE)
# Eyes
cat(paste("(Eyes_1_OUT)", sep="\t"))
print(eyes_vec[1,1], sep = "\t", quote = FALSE, row.names = FALSE)
# Interaction Output
cat(paste("(Interaction_OUT)", sep="\t"))
print(interaction_vec[2,1], sep = "\t", quote = FALSE, row.names = FALSE)
# Memory Output
cat(paste("(Memory_OUT)", sep="\t"))
print(memory_trace_vec[2,1], sep = "\t", quote = FALSE, row.names = FALSE)
cat(paste(";", sep="\t"))
cat("\n")
k = k+1
}
sink()
sink('testExp2.ex')
cat(paste("defT:-", "\n", sep=""))
k = 1
for(i in 1:nrow(hab_test_object_1)){
# HELPER ENTITIES
cat(paste("name: FailedHelper", k, "\n", sep=""))
cat(paste("I:", "\n", sep="\t"))
# Person 1
cat(paste("(Slot_A)", sep="\t"))
print(hab_test_object_1[i,], sep = "\t", quote = FALSE, row.names = FALSE)
# Eyes
cat(paste("(Eyes_1)", sep="\t"))
print(eyes_vec[1,1], sep = "\t", quote = FALSE, row.names = FALSE)
# Memory Input
cat(paste("(Memory_IN)", sep="\t"))
print(memory_trace_vec[1,1], sep = "\t", quote = FALSE, row.names = FALSE)
cat(paste("T:", "\n", sep="\t"))
# Person 1
cat(paste("(Slot_A_OUT)", sep="\t"))
print(hab_test_object_1[i,], sep = "\t", quote = FALSE, row.names = FALSE)
# Eyes
cat(paste("(Eyes_1_OUT)", sep="\t"))
print(eyes_vec[1,1], sep = "\t", quote = FALSE, row.names = FALSE)
# Interaction Output
cat(paste("(Interaction_OUT)", sep="\t"))
print(interaction_vec[1,1], sep = "\t", quote = FALSE, row.names = FALSE)
# Memory Output
cat(paste("(Memory_OUT)", sep="\t"))
print(memory_trace_vec[1,1], sep = "\t", quote = FALSE, row.names = FALSE)
cat(paste(";", sep="\t"))
cat("\n")
# HINDERER ENTITIES
cat(paste("name: FailedHinderer", k, "\n", sep=""))
cat(paste("I:", "\n", sep="\t"))
# Person 1
cat(paste("(Slot_A)", sep="\t"))
print(hab_test_object_3[i,], sep = "\t", quote = FALSE, row.names = FALSE)
# Eyes
cat(paste("(Eyes_1)", sep="\t"))
print(eyes_vec[1,1], sep = "\t", quote = FALSE, row.names = FALSE)
# Memory Input
cat(paste("(Memory_IN)", sep="\t"))
print(memory_trace_vec[2,1], sep = "\t", quote = FALSE, row.names = FALSE)
cat(paste("T:", "\n", sep="\t"))
# Person 1
cat(paste("(Slot_A_OUT)", sep="\t"))
print(hab_test_object_3[i,], sep = "\t", quote = FALSE, row.names = FALSE)
# Eyes
cat(paste("(Eyes_1_OUT)", sep="\t"))
print(eyes_vec[1,1], sep = "\t", quote = FALSE, row.names = FALSE)
# Interaction Output
cat(paste("(Interaction_OUT)", sep="\t"))
print(interaction_vec[2,1], sep = "\t", quote = FALSE, row.names = FALSE)
# Memory Output
cat(paste("(Memory_OUT)", sep="\t"))
print(memory_trace_vec[2,1], sep = "\t", quote = FALSE, row.names = FALSE)
cat(paste(";", sep="\t"))
cat("\n")
k = k+1
}
sink()
sink('testExp3A.ex')
cat(paste("defT:-", "\n", sep=""))
k = 1
for(i in 1:nrow(hab_test_object_1)){
# HELPER ENTITIES
cat(paste("name: SuccessfulHelper", k, "\n", sep=""))
cat(paste("I:", "\n", sep="\t"))
# Person 1
cat(paste("(Slot_A)", sep="\t"))
print(hab_test_object_1[i,], sep = "\t", quote = FALSE, row.names = FALSE)
# Eyes
cat(paste("(Eyes_1)", sep="\t"))
print(eyes_vec[1,1], sep = "\t", quote = FALSE, row.names = FALSE)
# Memory Input
cat(paste("(Memory_IN)", sep="\t"))
print(memory_trace_vec[1,1], sep = "\t", quote = FALSE, row.names = FALSE)
cat(paste("T:", "\n", sep="\t"))
# Person 1
cat(paste("(Slot_A_OUT)", sep="\t"))
print(hab_test_object_1[i,], sep = "\t", quote = FALSE, row.names = FALSE)
# Eyes
cat(paste("(Eyes_1_OUT)", sep="\t"))
print(eyes_vec[1,1], sep = "\t", quote = FALSE, row.names = FALSE)
# Interaction Output
cat(paste("(Interaction_OUT)", sep="\t"))
print(interaction_vec[1,1], sep = "\t", quote = FALSE, row.names = FALSE)
# Memory Output
cat(paste("(Memory_OUT)", sep="\t"))
print(memory_trace_vec[1,1], sep = "\t", quote = FALSE, row.names = FALSE)
cat(paste(";", sep="\t"))
cat("\n")
# HINDERER ENTITIES
cat(paste("name: FailedHelper", k, "\n", sep=""))
cat(paste("I:", "\n", sep="\t"))
# Person 1
cat(paste("(Slot_A)", sep="\t"))
print(hab_test_object_3[i,], sep = "\t", quote = FALSE, row.names = FALSE)
# Eyes
cat(paste("(Eyes_1)", sep="\t"))
print(eyes_vec[1,1], sep = "\t", quote = FALSE, row.names = FALSE)
# Memory Input
cat(paste("(Memory_IN)", sep="\t"))
print(memory_trace_vec[1,1], sep = "\t", quote = FALSE, row.names = FALSE)
cat(paste("T:", "\n", sep="\t"))
# Person 1
cat(paste("(Slot_A_OUT)", sep="\t"))
print(hab_test_object_3[i,], sep = "\t", quote = FALSE, row.names = FALSE)
# Eyes
cat(paste("(Eyes_1_OUT)", sep="\t"))
print(eyes_vec[1,1], sep = "\t", quote = FALSE, row.names = FALSE)
# Interaction Output
cat(paste("(Interaction_OUT)", sep="\t"))
print(interaction_vec[1,1], sep = "\t", quote = FALSE, row.names = FALSE)
# Memory Output
cat(paste("(Memory_OUT)", sep="\t"))
print(memory_trace_vec[1,1], sep = "\t", quote = FALSE, row.names = FALSE)
cat(paste(";", sep="\t"))
cat("\n")
k = k+1
}
sink()
sink('testExp3B.ex')
cat(paste("defT:-", "\n", sep=""))
k = 1
for(i in 1:nrow(hab_test_object_1)){
# HELPER ENTITIES
cat(paste("name: FailedHinderer", k, "\n", sep=""))
cat(paste("I:", "\n", sep="\t"))
# Person 1
cat(paste("(Slot_A)", sep="\t"))
print(hab_test_object_1[i,], sep = "\t", quote = FALSE, row.names = FALSE)
# Eyes
cat(paste("(Eyes_1)", sep="\t"))
print(eyes_vec[1,1], sep = "\t", quote = FALSE, row.names = FALSE)
# Memory Input
cat(paste("(Memory_IN)", sep="\t"))
print(memory_trace_vec[2,1], sep = "\t", quote = FALSE, row.names = FALSE)
cat(paste("T:", "\n", sep="\t"))
# Person 1
cat(paste("(Slot_A_OUT)", sep="\t"))
print(hab_test_object_1[i,], sep = "\t", quote = FALSE, row.names = FALSE)
# Eyes
cat(paste("(Eyes_1_OUT)", sep="\t"))
print(eyes_vec[1,1], sep = "\t", quote = FALSE, row.names = FALSE)
# Interaction Output
cat(paste("(Interaction_OUT)", sep="\t"))
print(interaction_vec[2,1], sep = "\t", quote = FALSE, row.names = FALSE)
# Memory Output
cat(paste("(Memory_OUT)", sep="\t"))
print(memory_trace_vec[2,1], sep = "\t", quote = FALSE, row.names = FALSE)
cat(paste(";", sep="\t"))
cat("\n")
# HINDERER ENTITIES
cat(paste("name: SuccessfulHinderer", k, "\n", sep=""))
cat(paste("I:", "\n", sep="\t"))
# Person 1
cat(paste("(Slot_A)", sep="\t"))
print(hab_test_object_3[i,], sep = "\t", quote = FALSE, row.names = FALSE)
# Eyes
cat(paste("(Eyes_1)", sep="\t"))
print(eyes_vec[1,1], sep = "\t", quote = FALSE, row.names = FALSE)
# Memory Input
cat(paste("(Memory_IN)", sep="\t"))
print(memory_trace_vec[2,1], sep = "\t", quote = FALSE, row.names = FALSE)
cat(paste("T:", "\n", sep="\t"))
# Person 1
cat(paste("(Slot_A_OUT)", sep="\t"))
print(hab_test_object_3[i,], sep = "\t", quote = FALSE, row.names = FALSE)
# Eyes
cat(paste("(Eyes_1_OUT)", sep="\t"))
print(eyes_vec[1,1], sep = "\t", quote = FALSE, row.names = FALSE)
# Interaction Output
cat(paste("(Interaction_OUT)", sep="\t"))
print(interaction_vec[2,1], sep = "\t", quote = FALSE, row.names = FALSE)
# Memory Output
cat(paste("(Memory_OUT)", sep="\t"))
print(memory_trace_vec[2,1], sep = "\t", quote = FALSE, row.names = FALSE)
cat(paste(";", sep="\t"))
cat("\n")
k = k+1
}
sink()
library(lme4)
library(nlme)
library(boot)
library(car)
library(reshape2)
library(ggplot2)
library(ez)
library(plyr)
library(ggsignif)
library(lsr)
library(sjmisc)
library(sjstats)
library(BayesFactor)
library(foreign)
library(dplyr)
library(lattice)
library(openxlsx)
options(scipen=9999)
# load data
D = read.csv(file.choose(), header = TRUE)
# load data
D = read.csv(file.choose(), header = TRUE)
rm(list=ls())
library(lme4)
library(nlme)
library(boot)
library(car)
library(reshape2)
library(ggplot2)
library(ez)
library(plyr)
library(ggsignif)
library(lsr)
library(sjmisc)
library(sjstats)
library(BayesFactor)
library(foreign)
library(dplyr)
library(lattice)
library(openxlsx)
options(scipen=9999)
# load data
D = read.csv(file.choose(), header = TRUE)
fix(D)
names(D)
dim(D)
16*6
4*8
D_tall = reshape(D, varying = 2:5, v.names = "measure",
timevar = "test_trial", idvar = "ID",
new.row.names = 1:32, direction = "long")
D_tall = D_tall[order(D_tall$ID),]
# rename levels of test_trial variable
D_tall$test_trial = revalue(x = as.factor(D_tall$test_trial), c("1" = "helper1", "2"="hinderer1", "3" = "helper2",
"4"="hinderer2"))
names(D_tall)
fix(D_tall)
length(rep(c(0,1), times = 48))
length(rep(c(0,1), times = 16))
D_tall$test_trial = rep(c(0,1), times = 16)
D_tall$test_trial = revalue(x = as.factor(D_tall$test_trial),
c("0" = "helper", "1"="hinderer"))
fix(D_tall)
names(D_tall)
fix(D_tall)
# remove unnecessary columns
D_tall$row.names = NULL
lme.fit.main = lme(measure~test_trial, random=~1|ID, data = D_tall)
anova.lme(lme.fit.main)
mean(D_tall$measure[D_tall$test_trial=="helper"])
sd(D_tall$measure[D_tall$test_trial=="helper"])
mean(D_tall$measure[D_tall$test_trial=="hinderer"])
sd(D_tall$measure[D_tall$test_trial=="hinderer"])
condition_barplot = ggplot(D_tall, aes(test_trial, measure, fill=test_trial)) # create the bar graph with test.trial.2 on the x-axis and measure on the y-axis
condition_barplot + stat_summary(fun.y = mean, geom = "bar", position = "dodge") + # add the bars, which represent the means and the place them side-by-side with 'dodge'
stat_summary(fun.data=mean_cl_boot, geom = "errorbar", position = position_dodge(width=0.90), width = 0.2) + # add errors bars
ylab("Choice Preference") + # change the label of the y-axis
scale_y_continuous(expand = c(0, 0)) +
coord_cartesian(ylim=c(0, 8)) +
scale_fill_manual(values = c("black", "azure3")) +
theme_bw()
condition_barplot = ggplot(D_tall, aes(test_trial, measure, fill=test_trial)) # create the bar graph with test.trial.2 on the x-axis and measure on the y-axis
condition_barplot + stat_summary(fun.y = mean, geom = "bar", position = "dodge") + # add the bars, which represent the means and the place them side-by-side with 'dodge'
stat_summary(fun.data=mean_cl_boot, geom = "errorbar", position = position_dodge(width=0.90), width = 0.2) + # add errors bars
ylab("Choice Preference") + # change the label of the y-axis
scale_y_continuous(expand = c(0, 0)) +
coord_cartesian(ylim=c(0, 10)) +
scale_fill_manual(values = c("black", "azure3")) +
theme_bw()
rm(list=ls())
library(lme4)
library(nlme)
library(boot)
library(car)
library(reshape2)
library(ggplot2)
library(ez)
library(plyr)
library(ggsignif)
library(lsr)
library(sjmisc)
library(sjstats)
library(BayesFactor)
library(foreign)
library(dplyr)
library(lattice)
options(scipen=9999)
# load data
D = read.csv(file.choose(), header = TRUE)
rm(list=ls())
library(lme4)
library(nlme)
library(boot)
library(car)
library(reshape2)
library(ggplot2)
library(ez)
library(plyr)
library(ggsignif)
library(lsr)
library(sjmisc)
library(sjstats)
library(BayesFactor)
library(foreign)
library(dplyr)
library(lattice)
options(scipen=9999)
# load data
D = read.csv(file.choose(), header = TRUE)
names(D)
dim(D)
D_tall = reshape(D, varying = 2:5, v.names = "measure",
timevar = "unit_type", idvar = "ID",
new.row.names = 1:32, direction = "long")
# order data
D_tall = D_tall[order(D_tall$ID),]
# names D_tall
names(D_tall)
D_tall$event = revalue(x = as.factor(D_tall$event),
c("1" = "First Trial",
"2"="Second Trial"))
length(rep(c(0,1), each = 2, times = 32))
length(rep(c(0,1), each = 2, times = 16))
length(rep(c(0,1), each = 2, times = 8))
D_tall$unit_type = as.factor(rep(c(0,1), each = 2, times = 8))
D_tall$unit_type = revalue(x = as.factor(D_tall$unit_type),
c("0" = "Interaction Unit",
"1"="NonInteraction Unit"))
fix(D_tall)
D_tall$char_type = as.factor(rep(c(0,1), each = 4, times = 16))
as.factor(rep(c(0,1), each = 4, times = 16))
D.1A = read.csv(file.choose(), header = TRUE)
4*16
D.1A_tall = reshape(D, varying = 2:5, v.names = "measure",
timevar = "unit_type", idvar = "ID",
new.row.names = 1:64, direction = "long")
fix(D.1A_tall)
D.1A_tall = D.1A_tall[order(D.1A_tall$ID),]
fix(D.1A_tall)
D.1A = read.csv(file.choose(), header = TRUE)
fix(D)
# load data
D.1A = read.csv(file.choose(), header = TRUE)
fix(D.1A)
D.1A_tall = reshape(D.1A, varying = 2:5, v.names = "measure",
timevar = "unit_type", idvar = "ID",
new.row.names = 1:64, direction = "long")
D.1A_tall = D.1A_tall[order(D.1A_tall$ID),]
fix(D.1A_tall)
D.1A_tall = reshape(D.1A, varying = 2:5, v.names = "measure",
timevar = "unit_type", idvar = "ID",
new.row.names = 1:64, direction = "long")
fix(D_tall)
D.1A_tall = D.1A_tall[order(D.1A_tall$ID),]
fix(D_tall)
rm(list=ls())
library(lme4)
library(nlme)
library(boot)
library(car)
library(reshape2)
library(ggplot2)
library(ez)
library(plyr)
library(ggsignif)
library(lsr)
library(sjmisc)
library(sjstats)
library(BayesFactor)
library(foreign)
library(dplyr)
library(lattice)
options(scipen=9999)
