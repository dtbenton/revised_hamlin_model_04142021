pretrain_objects_2 = objects_pretrain_stim[3,]
pretrain_objects_3 = objects_pretrain_stim[4:5,]
pretrain_objects_4 = objects_pretrain_stim[6,]
names(pretrain_objects_1) = NULL
rownames(pretrain_objects_1) = NULL
names(pretrain_objects_2) = NULL
rownames(pretrain_objects_2) = NULL
names(pretrain_objects_3) = NULL
rownames(pretrain_objects_3) = NULL
names(pretrain_objects_4) = NULL
rownames(pretrain_objects_4) = NULL
# HAB/TESTING SET: OBJECTS
hab_test_object_1 = helper_stim[1:2,]
hab_test_object_2 = climber_stim[1:2,]
hab_test_object_3 = hinderer_stim[1:2,]
###############
# interaction #
###############
interaction_vec = data.frame(x = c('1 0', '0 1'))
# interaction = c(1,0)
# non-interaction = c(0,1)
names(interaction_vec) = NULL
colnames(interaction_vec) = NULL
rownames(interaction_vec) = NULL
########
# eyes #
########
eyes_vec = data.frame(x = c('1 0', '0 1'))
# eyes = c(1,0)
# no-eyes = c(0,1)
names(eyes_vec) = NULL
colnames(eyes_vec) = NULL
rownames(eyes_vec) = NULL
################
# memory trace #
################
memory_trace_vec = data.frame(x = c('1 0 0', '0 1 0', '0 0 1'))
# agents that previously engaged in concordant action with another agent = c(1,0,0)
# agents that previously engaged in discordant action with another agent = c(0,1,0)
# agents that previously engaged in no action with another object = c(0,0,1)
names(memory_trace_vec) = NULL
colnames(memory_trace_vec) = NULL
rownames(memory_trace_vec) = NULL
##########
# action #
##########
action_vec = data.frame(x = c('1 0 0', '0 1 0', '0 0 1'))
# concordant action = c(1,0,0)
# discordant action = c(0,1,0)
# no action = c(0,0,1)
names(action_vec) = NULL
colnames(action_vec) = NULL
rownames(action_vec) = NULL
#########################
# self-propelled motion #
#########################
propel_vec = data.frame(x = c('1 0', '0 1'))
# self-propelled motion = c(1,0)
# caused motion = c(0,1)
names(propel_vec) = NULL
colnames(propel_vec) = NULL
rownames(propel_vec) = NULL
############
# mountain #
############
mountain = data.frame(x = c('0 0 0 0 0 0 0 0 0 1 0 0 0 1 1 0 0 1 1 1 0 1 1 1 1'))
names(mountain) = NULL
colnames(mountain) = NULL
rownames(mountain) = NULL
sink('test.ex')
cat(paste("defT:-", "\n", sep=""))
k = 1
for(i in 1:nrow(helper_stim)){
# HELPER ENTITIES
cat(paste("name: Helper", k, "\n", sep=""))
cat(paste("I:", "\n", sep="\t"))
# Person 1
cat(paste("(Slot_A)", sep="\t"))
print(helper_stim[i,], sep = "\t", quote = FALSE, row.names = FALSE)
# Eyes
cat(paste("(Eyes_1)", sep="\t"))
print(eyes_vec[1,1], sep = "\t", quote = FALSE, row.names = FALSE)
# Memory Input
cat(paste("(Memory_IN)", sep="\t"))
print(memory_trace_vec[1,1], sep = "\t", quote = FALSE, row.names = FALSE)
cat(paste("T:", "\n", sep="\t"))
# Person 1
cat(paste("(Slot_A_OUT)", sep="\t"))
print(helper_stim[i,], sep = "\t", quote = FALSE, row.names = FALSE)
# Eyes
cat(paste("(Eyes_1_OUT)", sep="\t"))
print(eyes_vec[1,1], sep = "\t", quote = FALSE, row.names = FALSE)
# Interaction Output
cat(paste("(Interaction_OUT)", sep="\t"))
print(interaction_vec[1,1], sep = "\t", quote = FALSE, row.names = FALSE)
# Memory Output
cat(paste("(Memory_OUT)", sep="\t"))
print(memory_trace_vec[1,1], sep = "\t", quote = FALSE, row.names = FALSE)
cat(paste(";", sep="\t"))
cat("\n")
# HINDERER ENTITIES
cat(paste("name: Hinderer", k, "\n", sep=""))
cat(paste("I:", "\n", sep="\t"))
# Person 1
cat(paste("(Slot_A)", sep="\t"))
print(hinderer_stim[i,], sep = "\t", quote = FALSE, row.names = FALSE)
# Eyes
cat(paste("(Eyes_1)", sep="\t"))
print(eyes_vec[1,1], sep = "\t", quote = FALSE, row.names = FALSE)
# Memory Input
cat(paste("(Memory_IN)", sep="\t"))
print(memory_trace_vec[2,1], sep = "\t", quote = FALSE, row.names = FALSE)
cat(paste("T:", "\n", sep="\t"))
# Person 1
cat(paste("(Slot_A_OUT)", sep="\t"))
print(hinderer_stim[i,], sep = "\t", quote = FALSE, row.names = FALSE)
# Eyes
cat(paste("(Eyes_1_OUT)", sep="\t"))
print(eyes_vec[1,1], sep = "\t", quote = FALSE, row.names = FALSE)
# Interaction Output
cat(paste("(Interaction_OUT)", sep="\t"))
print(interaction_vec[2,1], sep = "\t", quote = FALSE, row.names = FALSE)
# Memory Output
cat(paste("(Memory_OUT)", sep="\t"))
print(memory_trace_vec[2,1], sep = "\t", quote = FALSE, row.names = FALSE)
cat(paste(";", sep="\t"))
cat("\n")
k = k+1
}
sink()
sink('test_control.ex')
cat(paste("defT:-", "\n", sep=""))
k = 1
for(i in 1:nrow(helper_stim)){
# HELPER ENTITIES
cat(paste("name: Helper", k, "\n", sep=""))
cat(paste("I:", "\n", sep="\t"))
# Person 1
cat(paste("(Slot_A)", sep="\t"))
print(helper_stim[i,], sep = "\t", quote = FALSE, row.names = FALSE)
# Eyes
cat(paste("(Eyes_1)", sep="\t"))
print(eyes_vec[1,1], sep = "\t", quote = FALSE, row.names = FALSE)
# Memory Input
cat(paste("(Memory_IN)", sep="\t"))
print(memory_trace_vec[3,1], sep = "\t", quote = FALSE, row.names = FALSE)
cat(paste("T:", "\n", sep="\t"))
# Person 1
cat(paste("(Slot_A_OUT)", sep="\t"))
print(helper_stim[i,], sep = "\t", quote = FALSE, row.names = FALSE)
# Eyes
cat(paste("(Eyes_1_OUT)", sep="\t"))
print(eyes_vec[1,1], sep = "\t", quote = FALSE, row.names = FALSE)
# Interaction Input
cat(paste("(Interaction_OUT)", sep="\t"))
print(interaction_vec[1,1], sep = "\t", quote = FALSE, row.names = FALSE)
# Memory Output
cat(paste("(Memory_OUT)", sep="\t"))
print(memory_trace_vec[3,1], sep = "\t", quote = FALSE, row.names = FALSE)
cat(paste(";", sep="\t"))
cat("\n")
# HINDERER ENTITIES
cat(paste("name: Hinderer", k, "\n", sep=""))
cat(paste("I:", "\n", sep="\t"))
# Person 1
cat(paste("(Slot_A)", sep="\t"))
print(hinderer_stim[i,], sep = "\t", quote = FALSE, row.names = FALSE)
# Eyes
cat(paste("(Eyes_1)", sep="\t"))
print(eyes_vec[1,1], sep = "\t", quote = FALSE, row.names = FALSE)
# Memory Input
cat(paste("(Memory_IN)", sep="\t"))
print(memory_trace_vec[3,1], sep = "\t", quote = FALSE, row.names = FALSE)
cat(paste("T:", "\n", sep="\t"))
# Person 1
cat(paste("(Slot_A_OUT)", sep="\t"))
print(hinderer_stim[i,], sep = "\t", quote = FALSE, row.names = FALSE)
# Eyes
cat(paste("(Eyes_1_OUT)", sep="\t"))
print(eyes_vec[1,1], sep = "\t", quote = FALSE, row.names = FALSE)
# Interaction Output
cat(paste("(Interaction_OUT)", sep="\t"))
print(interaction_vec[2,1], sep = "\t", quote = FALSE, row.names = FALSE)
# Memory Output
cat(paste("(Memory_OUT)", sep="\t"))
print(memory_trace_vec[3,1], sep = "\t", quote = FALSE, row.names = FALSE)
cat(paste(";", sep="\t"))
cat("\n")
k = k+1
}
sink()
hinderer_stim
hab_test_object_1
sink('habituation.ex')
cat(paste("defT:-", "\n", sep=""))
k = 1
for(i in 1:nrow(hab_test_object_1)){
for(j in 1:nrow(hab_test_object_2)){
# HELPING EVENTS
cat(paste("name: HelpingEvents", k, "\n", sep=""))
cat(paste("I:", "\n", sep="\t"))
# Person 1
cat(paste("(Slot_A)", sep="\t"))
print(hab_test_object_1[i,], sep = "\t", quote = FALSE, row.names = FALSE)
cat(paste("(Eyes_1)", sep="\t"))
print(eyes_vec[1,1], sep = "\t", quote = FALSE, row.names = FALSE)
# Person 2
cat(paste("(Slot_B)", sep="\t"))
print(hab_test_object_2[j,], sep = "\t", quote = FALSE, row.names = FALSE)
cat(paste("(Eyes_2)", sep="\t"))
print(eyes_vec[1,1], sep = "\t", quote = FALSE, row.names = FALSE)
# Motion Input
cat(paste("(Motion_IN)", sep="\t"))
print(action_vec[1,1], sep = "\t", quote = FALSE, row.names = FALSE)
# Propulsion Input
cat(paste("(Propel_IN)", sep="\t"))
print(propel_vec[1,1], sep = "\t", quote = FALSE, row.names = FALSE)
# Mountain
cat(paste("(Mountain_IN)", sep="\t"))
print(mountain[1,1], sep = "\t", quote = FALSE, row.names = FALSE)
cat(paste("T:", "\n", sep="\t"))
# Person 1
cat(paste("(Slot_A_OUT)", sep="\t"))
print(hab_test_object_1[i,], sep = "\t", quote = FALSE, row.names = FALSE)
cat(paste("(Eyes_1_OUT)", sep="\t"))
print(eyes_vec[1,1], sep = "\t", quote = FALSE, row.names = FALSE)
# Person 2
cat(paste("(Slot_B_OUT)", sep="\t"))
print(hab_test_object_2[j,], sep = "\t", quote = FALSE, row.names = FALSE)
cat(paste("(Eyes_2_OUT)", sep="\t"))
print(eyes_vec[1,1], sep = "\t", quote = FALSE, row.names = FALSE)
# Motion Input
cat(paste("(Motion_OUT)", sep="\t"))
print(action_vec[1,1], sep = "\t", quote = FALSE, row.names = FALSE)
# Propulsion Input
cat(paste("(Propel_OUT)", sep="\t"))
print(propel_vec[1,1], sep = "\t", quote = FALSE, row.names = FALSE)
# Mountain
cat(paste("(Mountain_OUT)", sep="\t"))
print(mountain[1,1], sep = "\t", quote = FALSE, row.names = FALSE)
cat(paste(";", sep="\t"))
cat("\n")
# HINDERING EVENTS
cat(paste("name: HinderingEvents", k, "\n", sep=""))
cat(paste("I:", "\n", sep="\t"))
# Person 1
cat(paste("(Slot_A)", sep="\t"))
print(hab_test_object_3[i,], sep = "\t", quote = FALSE, row.names = FALSE)
cat(paste("(Eyes_1)", sep="\t"))
print(eyes_vec[1,1], sep = "\t", quote = FALSE, row.names = FALSE)
# Person 2
cat(paste("(Slot_B)", sep="\t"))
print(hab_test_object_2[j,], sep = "\t", quote = FALSE, row.names = FALSE)
cat(paste("(Eyes_2)", sep="\t"))
print(eyes_vec[1,1], sep = "\t", quote = FALSE, row.names = FALSE)
# Motion Input
cat(paste("(Motion_IN)", sep="\t"))
print(action_vec[2,1], sep = "\t", quote = FALSE, row.names = FALSE)
# Propulsion Input
cat(paste("(Propel_IN)", sep="\t"))
print(propel_vec[1,1], sep = "\t", quote = FALSE, row.names = FALSE)
# Mountain
cat(paste("(Mountain_IN)", sep="\t"))
print(mountain[1,1], sep = "\t", quote = FALSE, row.names = FALSE)
cat(paste("T:", "\n", sep="\t"))
# Person 1
cat(paste("(Slot_A_OUT)", sep="\t"))
print(hab_test_object_3[i,], sep = "\t", quote = FALSE, row.names = FALSE)
cat(paste("(Eyes_1_OUT)", sep="\t"))
print(eyes_vec[1,1], sep = "\t", quote = FALSE, row.names = FALSE)
# Person 2
cat(paste("(Slot_B_OUT)", sep="\t"))
print(hab_test_object_2[j,], sep = "\t", quote = FALSE, row.names = FALSE)
cat(paste("(Eyes_2_OUT)", sep="\t"))
print(eyes_vec[1,1], sep = "\t", quote = FALSE, row.names = FALSE)
# Motion Input
cat(paste("(Motion_OUT)", sep="\t"))
print(action_vec[2,1], sep = "\t", quote = FALSE, row.names = FALSE)
# Propulsion Input
cat(paste("(Propel_OUT)", sep="\t"))
print(propel_vec[1,1], sep = "\t", quote = FALSE, row.names = FALSE)
# Mountain
cat(paste("(Mountain_OUT)", sep="\t"))
print(mountain[1,1], sep = "\t", quote = FALSE, row.names = FALSE)
cat(paste(";", sep="\t"))
cat("\n")
k = k+1
}
}
sink()
sink('habituation_no_eyes_no_sp.ex')
cat(paste("defT:-", "\n", sep=""))
k = 1
for(i in 1:nrow(hab_test_object_1)){
for(j in 1:nrow(hab_test_object_1)){
# HELPING EVENTS
cat(paste("name: HelpingEvents", k, "\n", sep=""))
cat(paste("I:", "\n", sep="\t"))
# Person 1
cat(paste("(Slot_A)", sep="\t"))
print(hab_test_object_1[i,], sep = "\t", quote = FALSE, row.names = FALSE)
cat(paste("(Eyes_1)", sep="\t"))
print(eyes_vec[1,1], sep = "\t", quote = FALSE, row.names = FALSE)
# Person 2
cat(paste("(Slot_B)", sep="\t"))
print(hab_test_object_2[j,], sep = "\t", quote = FALSE, row.names = FALSE)
cat(paste("(Eyes_2)", sep="\t"))
print(eyes_vec[2,1], sep = "\t", quote = FALSE, row.names = FALSE)
# Motion Input
cat(paste("(Motion_IN)", sep="\t"))
print(action_vec[1,1], sep = "\t", quote = FALSE, row.names = FALSE)
# Propulsion Input
cat(paste("(Propel_IN)", sep="\t"))
print(propel_vec[2,1], sep = "\t", quote = FALSE, row.names = FALSE)
# Mountain
cat(paste("(Mountain_IN)", sep="\t"))
print(mountain[1,1], sep = "\t", quote = FALSE, row.names = FALSE)
cat(paste("T:", "\n", sep="\t"))
# Person 1
cat(paste("(Slot_A_OUT)", sep="\t"))
print(hab_test_object_1[i,], sep = "\t", quote = FALSE, row.names = FALSE)
cat(paste("(Eyes_1_OUT)", sep="\t"))
print(eyes_vec[1,1], sep = "\t", quote = FALSE, row.names = FALSE)
# Person 2
cat(paste("(Slot_B_OUT)", sep="\t"))
print(hab_test_object_2[j,], sep = "\t", quote = FALSE, row.names = FALSE)
cat(paste("(Eyes_2_OUT)", sep="\t"))
print(eyes_vec[2,1], sep = "\t", quote = FALSE, row.names = FALSE)
# Motion Input
cat(paste("(Motion_OUT)", sep="\t"))
print(action_vec[1,1], sep = "\t", quote = FALSE, row.names = FALSE)
# Propulsion Input
cat(paste("(Propel_OUT)", sep="\t"))
print(propel_vec[2,1], sep = "\t", quote = FALSE, row.names = FALSE)
# Mountain
cat(paste("(Mountain_OUT)", sep="\t"))
print(mountain[1,1], sep = "\t", quote = FALSE, row.names = FALSE)
cat(paste(";", sep="\t"))
cat("\n")
# HINDERING EVENTS
cat(paste("name: HinderingEvents", k, "\n", sep=""))
cat(paste("I:", "\n", sep="\t"))
# Person 1
cat(paste("(Slot_A)", sep="\t"))
print(hab_test_object_3[i,], sep = "\t", quote = FALSE, row.names = FALSE)
cat(paste("(Eyes_1)", sep="\t"))
print(eyes_vec[1,1], sep = "\t", quote = FALSE, row.names = FALSE)
# Person 2
cat(paste("(Slot_B)", sep="\t"))
print(hab_test_object_2[j,], sep = "\t", quote = FALSE, row.names = FALSE)
cat(paste("(Eyes_2)", sep="\t"))
print(eyes_vec[2,1], sep = "\t", quote = FALSE, row.names = FALSE)
# Motion Input
cat(paste("(Motion_IN)", sep="\t"))
print(action_vec[2,1], sep = "\t", quote = FALSE, row.names = FALSE)
# Propulsion Input
cat(paste("(Propel_IN)", sep="\t"))
print(propel_vec[2,1], sep = "\t", quote = FALSE, row.names = FALSE)
# Mountain
cat(paste("(Mountain_IN)", sep="\t"))
print(mountain[1,1], sep = "\t", quote = FALSE, row.names = FALSE)
cat(paste("T:", "\n", sep="\t"))
# Person 1
cat(paste("(Slot_A_OUT)", sep="\t"))
print(hab_test_object_3[i,], sep = "\t", quote = FALSE, row.names = FALSE)
cat(paste("(Eyes_1_OUT)", sep="\t"))
print(eyes_vec[1,1], sep = "\t", quote = FALSE, row.names = FALSE)
# Person 2
cat(paste("(Slot_B_OUT)", sep="\t"))
print(hab_test_object_2[j,], sep = "\t", quote = FALSE, row.names = FALSE)
cat(paste("(Eyes_2_OUT)", sep="\t"))
print(eyes_vec[2,1], sep = "\t", quote = FALSE, row.names = FALSE)
# Motion Input
cat(paste("(Motion_OUT)", sep="\t"))
print(action_vec[2,1], sep = "\t", quote = FALSE, row.names = FALSE)
# Propulsion Input
cat(paste("(Propel_OUT)", sep="\t"))
print(propel_vec[2,1], sep = "\t", quote = FALSE, row.names = FALSE)
# Mountain
cat(paste("(Mountain_OUT)", sep="\t"))
print(mountain[1,1], sep = "\t", quote = FALSE, row.names = FALSE)
cat(paste(";", sep="\t"))
cat("\n")
k = k+1
}
}
sink()
############
# test set #
############
sink('test.ex')
cat(paste("defT:-", "\n", sep=""))
k = 1
for(i in 1:nrow(hab_test_object_1)){
# HELPER ENTITIES
cat(paste("name: Helper", k, "\n", sep=""))
cat(paste("I:", "\n", sep="\t"))
# Person 1
cat(paste("(Slot_A)", sep="\t"))
print(hab_test_object_1[i,], sep = "\t", quote = FALSE, row.names = FALSE)
# Eyes
cat(paste("(Eyes_1)", sep="\t"))
print(eyes_vec[1,1], sep = "\t", quote = FALSE, row.names = FALSE)
# Memory Input
cat(paste("(Memory_IN)", sep="\t"))
print(memory_trace_vec[1,1], sep = "\t", quote = FALSE, row.names = FALSE)
cat(paste("T:", "\n", sep="\t"))
# Person 1
cat(paste("(Slot_A_OUT)", sep="\t"))
print(hab_test_object_1[i,], sep = "\t", quote = FALSE, row.names = FALSE)
# Eyes
cat(paste("(Eyes_1_OUT)", sep="\t"))
print(eyes_vec[1,1], sep = "\t", quote = FALSE, row.names = FALSE)
# Interaction Output
cat(paste("(Interaction_OUT)", sep="\t"))
print(interaction_vec[1,1], sep = "\t", quote = FALSE, row.names = FALSE)
# Memory Output
cat(paste("(Memory_OUT)", sep="\t"))
print(memory_trace_vec[1,1], sep = "\t", quote = FALSE, row.names = FALSE)
cat(paste(";", sep="\t"))
cat("\n")
# HINDERER ENTITIES
cat(paste("name: Hinderer", k, "\n", sep=""))
cat(paste("I:", "\n", sep="\t"))
# Person 1
cat(paste("(Slot_A)", sep="\t"))
print(hab_test_object_3[i,], sep = "\t", quote = FALSE, row.names = FALSE)
# Eyes
cat(paste("(Eyes_1)", sep="\t"))
print(eyes_vec[1,1], sep = "\t", quote = FALSE, row.names = FALSE)
# Memory Input
cat(paste("(Memory_IN)", sep="\t"))
print(memory_trace_vec[2,1], sep = "\t", quote = FALSE, row.names = FALSE)
cat(paste("T:", "\n", sep="\t"))
# Person 1
cat(paste("(Slot_A_OUT)", sep="\t"))
print(hab_test_object_3[i,], sep = "\t", quote = FALSE, row.names = FALSE)
# Eyes
cat(paste("(Eyes_1_OUT)", sep="\t"))
print(eyes_vec[1,1], sep = "\t", quote = FALSE, row.names = FALSE)
# Interaction Output
cat(paste("(Interaction_OUT)", sep="\t"))
print(interaction_vec[2,1], sep = "\t", quote = FALSE, row.names = FALSE)
# Memory Output
cat(paste("(Memory_OUT)", sep="\t"))
print(memory_trace_vec[2,1], sep = "\t", quote = FALSE, row.names = FALSE)
cat(paste(";", sep="\t"))
cat("\n")
k = k+1
}
sink()
sink('test_control.ex')
cat(paste("defT:-", "\n", sep=""))
k = 1
for(i in 1:nrow(hab_test_object_1)){
# HELPER ENTITIES
cat(paste("name: Helper", k, "\n", sep=""))
cat(paste("I:", "\n", sep="\t"))
# Person 1
cat(paste("(Slot_A)", sep="\t"))
print(hab_test_object_1[i,], sep = "\t", quote = FALSE, row.names = FALSE)
# Eyes
cat(paste("(Eyes_1)", sep="\t"))
print(eyes_vec[1,1], sep = "\t", quote = FALSE, row.names = FALSE)
# Memory Input
cat(paste("(Memory_IN)", sep="\t"))
print(memory_trace_vec[3,1], sep = "\t", quote = FALSE, row.names = FALSE)
cat(paste("T:", "\n", sep="\t"))
# Person 1
cat(paste("(Slot_A_OUT)", sep="\t"))
print(hab_test_object_1[i,], sep = "\t", quote = FALSE, row.names = FALSE)
# Eyes
cat(paste("(Eyes_1_OUT)", sep="\t"))
print(eyes_vec[1,1], sep = "\t", quote = FALSE, row.names = FALSE)
# Interaction Input
cat(paste("(Interaction_OUT)", sep="\t"))
print(interaction_vec[1,1], sep = "\t", quote = FALSE, row.names = FALSE)
# Memory Output
cat(paste("(Memory_OUT)", sep="\t"))
print(memory_trace_vec[3,1], sep = "\t", quote = FALSE, row.names = FALSE)
cat(paste(";", sep="\t"))
cat("\n")
# HINDERER ENTITIES
cat(paste("name: Hinderer", k, "\n", sep=""))
cat(paste("I:", "\n", sep="\t"))
# Person 1
cat(paste("(Slot_A)", sep="\t"))
print(hab_test_object_3[i,], sep = "\t", quote = FALSE, row.names = FALSE)
# Eyes
cat(paste("(Eyes_1)", sep="\t"))
print(eyes_vec[1,1], sep = "\t", quote = FALSE, row.names = FALSE)
# Memory Input
cat(paste("(Memory_IN)", sep="\t"))
print(memory_trace_vec[3,1], sep = "\t", quote = FALSE, row.names = FALSE)
cat(paste("T:", "\n", sep="\t"))
# Person 1
cat(paste("(Slot_A_OUT)", sep="\t"))
print(hab_test_object_3[i,], sep = "\t", quote = FALSE, row.names = FALSE)
# Eyes
cat(paste("(Eyes_1_OUT)", sep="\t"))
print(eyes_vec[1,1], sep = "\t", quote = FALSE, row.names = FALSE)
# Interaction Output
cat(paste("(Interaction_OUT)", sep="\t"))
print(interaction_vec[2,1], sep = "\t", quote = FALSE, row.names = FALSE)
# Memory Output
cat(paste("(Memory_OUT)", sep="\t"))
print(memory_trace_vec[3,1], sep = "\t", quote = FALSE, row.names = FALSE)
cat(paste(";", sep="\t"))
cat("\n")
k = k+1
}
sink()
