library(reshape2)
library(ggplot2)
library(ez)
library(plyr)
library(ggsignif)
library(lsr)
library(sjmisc)
library(sjstats)
library(BayesFactor)
library(foreign)
library(dplyr)
library(lattice)
options(scipen=9999)
# load data
D = read.csv(file.choose(), header = TRUE)
D_tall = reshape(D, varying = 3:6, v.names = "measure",
timevar = "unit_type", idvar = "ID",
new.row.names = 1:64, direction = "long")
# order data
D_tall = D_tall[order(D_tall$ID),]
# names D_tall
names(D_tall)
# rename the levels of the following factors: c(D_tall$event, D_tall$unit_type)
D_tall$event = revalue(x = as.factor(D_tall$event),
c("1" = "First Trial",
"2"="Second Trial"))
D_tall$unit_type = as.factor(rep(c(0,1), each = 2, times = 16))
D_tall$unit_type = revalue(x = as.factor(D_tall$unit_type),
c("0" = "Interaction Unit",
"1"="NonInteraction Unit"))
D_tall$char_type = as.factor(rep(c(0,1), each = 4, times = 8))
D_tall$char_type = revalue(x = as.factor(D_tall$char_type),
c("0" = "Failed Helper",
"1"="Successful Hinderer"))
# remove extraneous columns
D_tall$row.names = NULL
# reorder columns in 'D_tall' dataframe
D_tall = D_tall[,c(1,2,3,5,4)]
lm.fit = lm(measure~(unit_type + char_type)^2, data = D_tall)
anova(lm.fit)
t.test(D_tall$measure[D_tall$unit_type=="Interaction Unit" & D_tall$char_type=="Failed Helper"],
D_tall$measure[D_tall$unit_type=="NonInteraction Unit" & D_tall$char_type=="Failed Helper"],
alternative = c("two.sided"), paired = TRUE)
t.test(D_tall$measure[D_tall$unit_type=="Interaction Unit" & D_tall$char_type=="Successful Hinderer"],
D_tall$measure[D_tall$unit_type=="NonInteraction Unit" & D_tall$char_type=="Successful Hinderer"],
alternative = c("two.sided"), paired = TRUE)
mean(D_tall$measure[D_tall$unit_type=="Interaction Unit" & D_tall$char_type=="Failed Helper"])
sd(D_tall$measure[D_tall$unit_type=="Interaction Unit" & D_tall$char_type=="Failed Helper"])
mean(D_tall$measure[D_tall$unit_type=="NonInteraction Unit" & D_tall$char_type=="Failed Helper"])
sd(D_tall$measure[D_tall$unit_type=="NonInteraction Unit" & D_tall$char_type=="Failed Helper"])
mean(D_tall$measure[D_tall$unit_type=="Interaction Unit" & D_tall$char_type=="Successful Hinderer"])
sd(D_tall$measure[D_tall$unit_type=="Interaction Unit" & D_tall$char_type=="Successful Hinderer"])
mean(D_tall$measure[D_tall$unit_type=="NonInteraction Unit" & D_tall$char_type=="Successful Hinderer"])
sd(D_tall$measure[D_tall$unit_type=="NonInteraction Unit" & D_tall$char_type=="Successful Hinderer"])
mean(D_tall$measure[D_tall$unit_type=="Interaction Unit" & D_tall$char_type=="Successful Hinderer"])
sd(D_tall$measure[D_tall$unit_type=="Interaction Unit" & D_tall$char_type=="Successful Hinderer"])
mean(D_tall$measure[D_tall$unit_type=="NonInteraction Unit" & D_tall$char_type=="Successful Hinderer"])
sd(D_tall$measure[D_tall$unit_type=="NonInteraction Unit" & D_tall$char_type=="Successful Hinderer"])
condition_barplot = ggplot(D_tall, aes(char_type, measure, fill = unit_type)) # create the bar graph with test.trial.2 on the x-axis and measure on the y-axis
condition_barplot + stat_summary(fun.y = mean, geom = "bar", position = "dodge") + # add the bars, which represent the means and the place them side-by-side with 'dodge'
stat_summary(fun.data=mean_cl_boot, geom = "errorbar", position = position_dodge(width=0.90), width = 0.2) + # add errors bars
ylab("Interaction Expectation") + # change the label of the y-axis
theme_bw() + # remove the gray background
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) + # remove the major and minor grids
scale_y_continuous(expand = c(0, 0)) + # ensure that bars hit the x-axis
coord_cartesian(ylim=c(0, 100)) +
scale_fill_manual(values=c("black", "gray", "black", "gray")) +
theme_classic() + # this changes the size and potentially weight of the facet labels
labs(x = "Character Type") +
labs(fill = "Unit Type")
rm(list=ls())
library(lme4)
library(nlme)
library(boot)
library(car)
library(reshape2)
library(ggplot2)
library(ez)
library(plyr)
library(ggsignif)
library(lsr)
library(sjmisc)
library(sjstats)
library(BayesFactor)
library(foreign)
library(dplyr)
library(lattice)
options(scipen=9999)
# load data
D = read.csv(file.choose(), header = TRUE)
D_tall = reshape(D, varying = 3:6, v.names = "measure",
timevar = "unit_type", idvar = "ID",
new.row.names = 1:64, direction = "long")
# order data
D_tall = D_tall[order(D_tall$ID),]
# names D_tall
names(D_tall)
# rename the levels of the following factors: c(D_tall$event, D_tall$unit_type)
D_tall$event = revalue(x = as.factor(D_tall$event),
c("1" = "First Trial",
"2"="Second Trial"))
D_tall$unit_type = as.factor(rep(c(0,1), each = 2, times = 16))
D_tall$unit_type = revalue(x = as.factor(D_tall$unit_type),
c("0" = "Interaction Unit",
"1"="NonInteraction Unit"))
D_tall$char_type = as.factor(rep(c(0,1), each = 4, times = 8))
D_tall$char_type = revalue(x = as.factor(D_tall$char_type),
c("0" = "Failed Helper",
"1"="Failed Hinderer"))
# remove extraneous columns
D_tall$row.names = NULL
# reorder columns in 'D_tall' dataframe
D_tall = D_tall[,c(1,2,3,5,4)]
lm.fit = lm(measure~(unit_type + char_type)^2, data = D_tall)
anova(lm.fit)
mean(D_tall$measure[D_tall$unit_type=="Interaction Unit" & D_tall$char_type=="Failed Helper"])
sd(D_tall$measure[D_tall$unit_type=="Interaction Unit" & D_tall$char_type=="Failed Helper"])
mean(D_tall$measure[D_tall$unit_type=="NonInteraction Unit" & D_tall$char_type=="Failed Helper"])
sd(D_tall$measure[D_tall$unit_type=="NonInteraction Unit" & D_tall$char_type=="Failed Helper"])
mean(D_tall$measure[D_tall$unit_type=="Interaction Unit" & D_tall$char_type=="Failed Helper"])
sd(D_tall$measure[D_tall$unit_type=="Interaction Unit" & D_tall$char_type=="Failed Helper"])
mean(D_tall$measure[D_tall$unit_type=="NonInteraction Unit" & D_tall$char_type=="Failed Helper"])
sd(D_tall$measure[D_tall$unit_type=="NonInteraction Unit" & D_tall$char_type=="Failed Helper"])
t.test(D_tall$measure[D_tall$unit_type=="Interaction Unit" & D_tall$char_type=="Failed Helper"],
D_tall$measure[D_tall$unit_type=="NonInteraction Unit" & D_tall$char_type=="Failed Helper"],
alternative = c("two.sided"), paired = TRUE)
# Hinderer
mean(D_tall$measure[D_tall$unit_type=="Interaction Unit" & D_tall$char_type=="Failed Hinderer"])
sd(D_tall$measure[D_tall$unit_type=="Interaction Unit" & D_tall$char_type=="Failed Hinderer"])
mean(D_tall$measure[D_tall$unit_type=="NonInteraction Unit" & D_tall$char_type=="Failed Hinderer"])
sd(D_tall$measure[D_tall$unit_type=="NonInteraction Unit" & D_tall$char_type=="Failed Hinderer"])
t.test(D_tall$measure[D_tall$unit_type=="Interaction Unit" & D_tall$char_type=="Failed Hinderer"],
D_tall$measure[D_tall$unit_type=="NonInteraction Unit" & D_tall$char_type=="Failed Hinderer"],
alternative = c("two.sided"), paired = TRUE)
condition_barplot = ggplot(D_tall, aes(char_type, measure, fill = unit_type)) # create the bar graph with test.trial.2 on the x-axis and measure on the y-axis
condition_barplot + stat_summary(fun.y = mean, geom = "bar", position = "dodge") + # add the bars, which represent the means and the place them side-by-side with 'dodge'
stat_summary(fun.data=mean_cl_boot, geom = "errorbar", position = position_dodge(width=0.90), width = 0.2) + # add errors bars
ylab("Interaction Expectation") + # change the label of the y-axis
theme_bw() + # remove the gray background
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) + # remove the major and minor grids
scale_y_continuous(expand = c(0, 0)) + # ensure that bars hit the x-axis
coord_cartesian(ylim=c(0, 100)) +
scale_fill_manual(values=c("black", "gray", "black", "gray")) +
theme_classic() + # this changes the size and potentially weight of the facet labels
labs(x = "Character Type") +
labs(fill = "Unit Type")
rm(list=ls())
library(lme4)
library(nlme)
library(boot)
library(car)
library(reshape2)
library(ggplot2)
library(ez)
library(plyr)
library(ggsignif)
library(lsr)
library(sjmisc)
library(sjstats)
library(BayesFactor)
library(foreign)
library(dplyr)
library(lattice)
options(scipen=9999)
# load data
D = read.csv(file.choose(), header = TRUE)
D_tall = reshape(D, varying = 3:6, v.names = "measure",
timevar = "unit_type", idvar = "ID",
new.row.names = 1:64, direction = "long")
# order data
D_tall = D_tall[order(D_tall$ID),]
# names D_tall
names(D_tall)
# rename the levels of the following factors: c(D_tall$event, D_tall$unit_type)
D_tall$event = revalue(x = as.factor(D_tall$event),
c("1" = "First Trial",
"2"="Second Trial"))
D_tall$unit_type = as.factor(rep(c(0,1), each = 2, times = 16))
D_tall$unit_type = revalue(x = as.factor(D_tall$unit_type),
c("0" = "Interaction Unit",
"1"="NonInteraction Unit"))
D_tall$char_type = as.factor(rep(c(0,1), each = 4, times = 8))
D_tall$char_type = revalue(x = as.factor(D_tall$char_type),
c("0" = "Successful Helper",
"1"="Failed Helper"))
# remove extraneous columns
D_tall$row.names = NULL
# reorder columns in 'D_tall' dataframe
D_tall = D_tall[,c(1,2,3,5,4)]
lm.fit = lm(measure~(unit_type + char_type)^2, data = D_tall)
anova(lm.fit)
mean(D_tall$measure[D_tall$unit_type=="Interaction Unit"])
mean(D_tall$measure[D_tall$unit_type=="NonInteraction Unit"])
mean(D_tall$measure[D_tall$unit_type=="Interaction Unit"])
sd(D_tall$measure[D_tall$unit_type=="Interaction Unit"])
mean(D_tall$measure[D_tall$unit_type=="NonInteraction Unit"])
sd(D_tall$measure[D_tall$unit_type=="NonInteraction Unit"])
t.test(D_tall$measure[D_tall$unit_type=="Interaction Unit"],
D_tall$measure[D_tall$unit_type=="NonInteraction Unit"],
alternative = c("two.sided"), paired = TRUE)
condition_barplot = ggplot(D_tall, aes(char_type, measure, fill = unit_type)) # create the bar graph with test.trial.2 on the x-axis and measure on the y-axis
condition_barplot + stat_summary(fun.y = mean, geom = "bar", position = "dodge") + # add the bars, which represent the means and the place them side-by-side with 'dodge'
stat_summary(fun.data=mean_cl_boot, geom = "errorbar", position = position_dodge(width=0.90), width = 0.2) + # add errors bars
ylab("Interaction Expectation") + # change the label of the y-axis
theme_bw() + # remove the gray background
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) + # remove the major and minor grids
scale_y_continuous(expand = c(0, 0)) + # ensure that bars hit the x-axis
coord_cartesian(ylim=c(0, 100)) +
scale_fill_manual(values=c("black", "gray", "black", "gray")) +
theme_classic() + # this changes the size and potentially weight of the facet labels
labs(x = "Character Type") +
labs(fill = "Unit Type")
rm(list=ls())
library(lme4)
library(nlme)
library(boot)
library(car)
library(reshape2)
library(ggplot2)
library(ez)
library(plyr)
library(ggsignif)
library(lsr)
library(sjmisc)
library(sjstats)
library(BayesFactor)
library(foreign)
library(dplyr)
library(lattice)
options(scipen=9999)
# load data
D = read.csv(file.choose(), header = TRUE)
D_tall = reshape(D, varying = 3:6, v.names = "measure",
timevar = "unit_type", idvar = "ID",
new.row.names = 1:64, direction = "long")
# order data
D_tall = D_tall[order(D_tall$ID),]
D_tall$event = revalue(x = as.factor(D_tall$event),
c("1" = "First Trial",
"2"="Second Trial"))
D_tall$unit_type = as.factor(rep(c(0,1), each = 2, times = 16))
D_tall$unit_type = revalue(x = as.factor(D_tall$unit_type),
c("0" = "Interaction Unit",
"1"="NonInteraction Unit"))
D_tall$char_type = as.factor(rep(c(0,1), each = 4, times = 8))
D_tall$char_type = revalue(x = as.factor(D_tall$char_type),
c("0" = "Successful Hinderer",
"1"="Failed Hinderer"))
# remove extraneous columns
D_tall$row.names = NULL
# reorder columns in 'D_tall' dataframe
D_tall = D_tall[,c(1,2,3,5,4)]
## RUN MODELS ##
lm.fit = lm(measure~(unit_type + char_type)^2, data = D_tall)
anova(lm.fit)
mean(D_tall$measure[D_tall$unit_type=="Interaction Unit"])
sd(D_tall$measure[D_tall$unit_type=="Interaction Unit"])
mean(D_tall$measure[D_tall$unit_type=="NonInteraction Unit"])
sd(D_tall$measure[D_tall$unit_type=="NonInteraction Unit"])
t.test(D_tall$measure[D_tall$unit_type=="Interaction Unit"],
D_tall$measure[D_tall$unit_type=="NonInteraction Unit"],
alternative = c("two.sided"), paired = TRUE)
condition_barplot = ggplot(D_tall, aes(char_type, measure, fill = unit_type)) # create the bar graph with test.trial.2 on the x-axis and measure on the y-axis
condition_barplot + stat_summary(fun.y = mean, geom = "bar", position = "dodge") + # add the bars, which represent the means and the place them side-by-side with 'dodge'
stat_summary(fun.data=mean_cl_boot, geom = "errorbar", position = position_dodge(width=0.90), width = 0.2) + # add errors bars
ylab("Interaction Expectation") + # change the label of the y-axis
theme_bw() + # remove the gray background
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) + # remove the major and minor grids
scale_y_continuous(expand = c(0, 0)) + # ensure that bars hit the x-axis
coord_cartesian(ylim=c(0, 100)) +
scale_fill_manual(values=c("black", "gray", "black", "gray")) +
theme_classic() + # this changes the size and potentially weight of the facet labels
labs(x = "Character Type") +
labs(fill = "Unit Type")
rm(list=ls())
library(lme4)
library(nlme)
library(boot)
library(car)
library(reshape2)
library(ggplot2)
library(ez)
library(plyr)
library(ggsignif)
library(lsr)
library(sjmisc)
library(sjstats)
library(BayesFactor)
library(foreign)
library(dplyr)
library(lattice)
options(scipen=9999)
# load data
D = read.csv(file.choose(), header = TRUE)
D_tall = reshape(D, varying = 3:6, v.names = "measure",
timevar = "unit_type", idvar = "ID",
new.row.names = 1:64, direction = "long")
# order data
D_tall = D_tall[order(D_tall$ID),]
# names D_tall
names(D_tall)
# rename the levels of the following factors: c(D_tall$event, D_tall$unit_type)
D_tall$event = revalue(x = as.factor(D_tall$event),
c("1" = "First Trial",
"2"="Second Trial"))
D_tall$unit_type = as.factor(rep(c(0,1), each = 2, times = 16))
D_tall$unit_type = revalue(x = as.factor(D_tall$unit_type),
c("0" = "Interaction Unit",
"1"="NonInteraction Unit"))
D_tall$char_type = as.factor(rep(c(0,1), each = 4, times = 8))
D_tall$char_type = revalue(x = as.factor(D_tall$char_type),
c("0" = "Concordant Puppet",
"1"="Slammer Puppet"))
# remove extraneous columns
D_tall$row.names = NULL
# reorder columns in 'D_tall' dataframe
D_tall = D_tall[,c(1,2,3,5,4)]
lm.fit = lm(measure~(unit_type + char_type)^2, data = D_tall)
anova(lm.fit)
mean(D_tall$measure[D_tall$unit_type=="Interaction Unit"])
mean(D_tall$measure[D_tall$unit_type=="Noninteraction Unit"])
mean(D_tall$measure[D_tall$unit_type=="NonInteraction Unit"])
mean(D_tall$measure[D_tall$unit_type=="Interaction Unit"])
mean(D_tall$measure[D_tall$unit_type=="NonInteraction Unit"])
rm(list=ls())
library(lme4)
library(nlme)
library(boot)
library(car)
library(reshape2)
library(ggplot2)
library(ez)
library(plyr)
library(ggsignif)
library(lsr)
library(sjmisc)
library(sjstats)
library(BayesFactor)
library(foreign)
library(dplyr)
library(lattice)
options(scipen=9999)
# load data
D = read.csv(file.choose(), header = TRUE)
D_tall = reshape(D, varying = 3:6, v.names = "measure",
timevar = "unit_type", idvar = "ID",
new.row.names = 1:64, direction = "long")
# order data
D_tall = D_tall[order(D_tall$ID),]
# names D_tall
names(D_tall)
# rename the levels of the following factors: c(D_tall$event, D_tall$unit_type)
D_tall$event = revalue(x = as.factor(D_tall$event),
c("1" = "First Trial",
"2"="Second Trial"))
D_tall$unit_type = as.factor(rep(c(0,1), each = 2, times = 16))
D_tall$unit_type = revalue(x = as.factor(D_tall$unit_type),
c("0" = "Interaction Unit",
"1"="NonInteraction Unit"))
D_tall$char_type = as.factor(rep(c(0,1), each = 4, times = 8))
D_tall$char_type = revalue(x = as.factor(D_tall$char_type),
c("0" = "Concordant Puppet",
"1"="Slammer Puppet"))
# remove extraneous columns
D_tall$row.names = NULL
# reorder columns in 'D_tall' dataframe
D_tall = D_tall[,c(1,2,3,5,4)]
mean(D_tall$measure[D_tall$unit_type=="Interaction Unit"])
mean(D_tall$measure[D_tall$unit_type=="NonInteraction Unit"])
lm.fit = lm(measure~(unit_type + char_type)^2, data = D_tall)
anova(lm.fit)
condition_barplot = ggplot(D_tall, aes(char_type, measure, fill = unit_type)) # create the bar graph with test.trial.2 on the x-axis and measure on the y-axis
condition_barplot + stat_summary(fun.y = mean, geom = "bar", position = "dodge") + # add the bars, which represent the means and the place them side-by-side with 'dodge'
stat_summary(fun.data=mean_cl_boot, geom = "errorbar", position = position_dodge(width=0.90), width = 0.2) + # add errors bars
ylab("Interaction Expectation") + # change the label of the y-axis
theme_bw() + # remove the gray background
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) + # remove the major and minor grids
scale_y_continuous(expand = c(0, 0)) + # ensure that bars hit the x-axis
coord_cartesian(ylim=c(0, 100)) +
scale_fill_manual(values=c("black", "gray", "black", "gray")) +
theme_classic() + # this changes the size and potentially weight of the facet labels
labs(x = "Character Type") +
labs(fill = "Unit Type")
rm(list=ls())
library(lme4)
library(nlme)
library(boot)
library(car)
library(reshape2)
library(ggplot2)
library(ez)
library(plyr)
library(ggsignif)
library(lsr)
library(sjmisc)
library(sjstats)
library(BayesFactor)
library(foreign)
library(dplyr)
library(lattice)
options(scipen=9999)
# load data
D = read.csv(file.choose(), header = TRUE)
D_tall = reshape(D, varying = 3:6, v.names = "measure",
timevar = "unit_type", idvar = "ID",
new.row.names = 1:64, direction = "long")
# order data
D_tall = D_tall[order(D_tall$ID),]
# names D_tall
names(D_tall)
# rename the levels of the following factors: c(D_tall$event, D_tall$unit_type)
D_tall$event = revalue(x = as.factor(D_tall$event),
c("1" = "First Trial",
"2"="Second Trial"))
D_tall$unit_type = as.factor(rep(c(0,1), each = 2, times = 16))
D_tall$unit_type = revalue(x = as.factor(D_tall$unit_type),
c("0" = "Interaction Unit",
"1"="NonInteraction Unit"))
D_tall$char_type = as.factor(rep(c(0,1), each = 4, times = 8))
D_tall$char_type = revalue(x = as.factor(D_tall$char_type),
c("0" = "Coordinated Puppet",
"1"="Slammer Puppet"))
# remove extraneous columns
D_tall$row.names = NULL
# reorder columns in 'D_tall' dataframe
D_tall = D_tall[,c(1,2,3,5,4)]
condition_barplot = ggplot(D_tall, aes(char_type, measure, fill = unit_type)) # create the bar graph with test.trial.2 on the x-axis and measure on the y-axis
condition_barplot + stat_summary(fun.y = mean, geom = "bar", position = "dodge") + # add the bars, which represent the means and the place them side-by-side with 'dodge'
stat_summary(fun.data=mean_cl_boot, geom = "errorbar", position = position_dodge(width=0.90), width = 0.2) + # add errors bars
ylab("Interaction Expectation") + # change the label of the y-axis
theme_bw() + # remove the gray background
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) + # remove the major and minor grids
scale_y_continuous(expand = c(0, 0)) + # ensure that bars hit the x-axis
coord_cartesian(ylim=c(0, 100)) +
scale_fill_manual(values=c("black", "gray", "black", "gray")) +
theme_classic() + # this changes the size and potentially weight of the facet labels
labs(x = "Character Type") +
labs(fill = "Unit Type")
?binom.test
8+3+3+12
7+8+6+10
31+26
44+20
57/64
binom.test(57,64,p=0.25)
4/6
binom.test(57,64,p=0.66)
6+8+3+12+15+5+7+8
binom.test(57,105,p=0.66)
47+58
100*(.3529/3)
100*(.3529/3)*3
100*(.2353/4)
100*(.2353/4)*4
17.29+16.5+17.84+18.78
34.4+34.5
38.4+33.5
38+34
36+32.8
28.8+39.75
37.6+34.75
36+37.5
36+35
31+35.2
29.66+34
36+37.6
33+31.6
30.8+30.75
31+28.8
32+35.6
36.8+31.5
37+33.6
37+29.6
39.25+32.66
36+37.5
31.6+31.25
31.75+29.66
37.5+36
32+34.25
34+30.8
36+32.8
31.75+29.66
61.41/80
30+33.33
27+5+45
32.8+36
34.6+31.5
38.4+33.5
38+29.2
28.8+39.75
40*.93
40*.95
40*.87
40*.76
40*.81
40*.83
40*.73
40*.89
40*.95
40*.8
40*.87
40*.82
66.09/80
75.2/80
80*.9
135+80+40
